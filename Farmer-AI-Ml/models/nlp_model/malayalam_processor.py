import torch
import torch.nn as nn
from transformers import AutoTokenizer, AutoModel
import numpy as np
import re

class MalayalamNLP:
    def __init__(self):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"Using device: {self.device}")
        
        try:
            self.tokenizer = AutoTokenizer.from_pretrained("ai4bharat/indic-bert")
            self.model = AutoModel.from_pretrained("ai4bharat/indic-bert").to(self.device)
            print("‚úÖ Malayalam NLP model loaded successfully")
        except Exception as e:
            print(f"‚ùå Failed to load model: {e}")
            self.model = None
        
        # Agricultural keywords for intent detection - SIMPLIFIED
        self.intent_keywords = {
            'pest_control': ['‡¥™‡µÅ‡¥≥‡µç‡¥≥‡¥ø', '‡¥∞‡µã‡¥ó', '‡¥ï‡µÄ‡¥ü', '‡¥§‡µÅ‡¥Æ‡µç‡¥™‡µç', '‡¥ö‡¥ø‡¥ï‡¥ø‡¥§‡µç‡¥∏', '‡¥Æ‡¥∞‡µÅ‡¥®‡µç‡¥®‡µç', '‡¥™‡µÅ‡¥¥‡µÅ'],
            'fertilizer_advice': ['‡¥µ‡¥≥‡¥Ç', '‡¥â‡¥∞‡µÅ‡¥≥', 'manure', 'fertilizer', '‡¥ú‡µà‡¥µ‡¥µ‡¥≥‡¥Ç', '‡¥∞‡¥æ‡¥∏‡¥µ‡¥≥‡¥Ç'],
            'weather_query': ['‡¥Æ‡¥¥', '‡¥µ‡µÜ‡¥Ø‡¥ø‡¥≤', '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•', 'weather', '‡¥Æ‡¥û‡µç‡¥û‡µç', '‡¥Ü‡µº‡¥¶‡µç‡¥∞‡¥§'],
            'irrigation_advice': ['‡¥ú‡¥≤‡¥Ç', '‡¥®‡µÄ‡¥∞‡µç', 'irrigation', '‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®', '‡¥®‡¥®‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µΩ'],
            'crop_advice': ['‡¥µ‡¥ø‡¥≥', '‡¥ï‡µÉ‡¥∑‡¥ø', 'crop', '‡¥µ‡¥ø‡¥§‡µç‡¥§‡µç', 'seed', '‡¥ï‡¥æ‡¥Ø‡µç', '‡¥™‡¥¥‡¥Ç']
        }
    
    def get_embeddings(self, text):
        if self.model is None:
            return np.random.rand(768)
            
        inputs = self.tokenizer(
            text, 
            return_tensors="pt", 
            padding=True, 
            truncation=True,
            max_length=512
        )
        with torch.no_grad():
            outputs = self.model(**inputs.to(self.device))
        return outputs.last_hidden_state.mean(dim=1).cpu().numpy()[0]
    
    def detect_intent(self, text):
        """Improved intent detection with better keyword matching"""
        # First, try keyword-based matching
        keyword_intent = self._detect_intent_by_keywords(text)
        
        if keyword_intent[1] > 0.3:  # Lower threshold for better detection
            return keyword_intent
        
        # If no strong keyword match, use pattern matching
        pattern_intent = self._detect_intent_by_patterns(text)
        if pattern_intent[1] > 0.4:
            return pattern_intent
        
        return 'general_advice', 0.5
    
    def _detect_intent_by_keywords(self, text):
        """Detect intent based on keyword presence with better matching"""
        text_lower = text.lower()
        intent_scores = {}
        
        for intent, keywords in self.intent_keywords.items():
            score = 0
            for keyword in keywords:
                # Check if keyword exists in text (simple substring match)
                if keyword in text_lower:
                    score += 2  # Higher weight for exact matches
                # Also check for partial matches for longer words
                elif any(keyword in word for word in text_lower.split()):
                    score += 1
            intent_scores[intent] = score
        
        # Normalize scores and get best intent
        if max(intent_scores.values()) > 0:
            best_intent = max(intent_scores.items(), key=lambda x: x[1])
            confidence = min(0.9, best_intent[1] / 5.0)  # Normalize to 0-0.9
            return best_intent[0], max(0.5, confidence)
        
        return 'general_advice', 0.3
    
    def _detect_intent_by_patterns(self, text):
        """Detect intent based on common patterns in agricultural queries"""
        text_lower = text.lower()
        
        # Pest control patterns
        pest_patterns = [
            r'.*‡¥™‡µÅ‡¥≥‡µç‡¥≥‡¥ø.*', r'.*‡¥∞‡µã‡¥ó.*', r'.*‡¥ï‡µÄ‡¥ü.*', r'.*‡¥§‡µÅ‡¥Æ‡µç‡¥™‡µç.*', 
            r'.*‡¥ö‡¥ø‡¥ï‡¥ø‡¥§‡µç‡¥∏.*', r'.*‡¥Æ‡¥∞‡µÅ‡¥®‡µç‡¥®‡µç.*', r'.*‡¥™‡µÅ‡¥¥‡µÅ.*', r'.*‡¥Ö‡¥£‡µÅ‡¥¨‡¥æ‡¥ß.*'
        ]
        
        # Fertilizer patterns  
        fertilizer_patterns = [
            r'.*‡¥µ‡¥≥‡¥Ç.*', r'.*‡¥â‡¥∞‡µÅ‡¥≥.*', r'.*manure.*', r'.*fertilizer.*',
            r'.*‡¥ú‡µà‡¥µ.*', r'.*‡¥∞‡¥æ‡¥∏.*', r'.*npk.*', r'.*‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø.*'
        ]
        
        # Weather patterns
        weather_patterns = [
            r'.*‡¥Æ‡¥¥.*', r'.*‡¥µ‡µÜ‡¥Ø‡¥ø‡¥≤.*', r'.*‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•.*', r'.*weather.*',
            r'.*‡¥Æ‡¥û‡µç‡¥û‡µç.*', r'.*‡¥Ü‡µº‡¥¶‡µç‡¥∞‡¥§.*', r'.*‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤.*'
        ]
        
        # Check patterns
        for pattern in pest_patterns:
            if re.search(pattern, text_lower):
                return 'pest_control', 0.7
                
        for pattern in fertilizer_patterns:
            if re.search(pattern, text_lower):
                return 'fertilizer_advice', 0.7
                
        for pattern in weather_patterns:
            if re.search(pattern, text_lower):
                return 'weather_query', 0.7
        
        return 'general_advice', 0.4

# Test function with more detailed output
def test_nlp():
    print("üß™ Testing Enhanced Malayalam NLP...")
    nlp = MalayalamNLP()
    
    test_queries = [
        "‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥®‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥≤‡µÜ ‡¥á‡¥≤ ‡¥™‡µÅ‡¥≥‡µç‡¥≥‡¥ø ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥ö‡¥ø‡¥ï‡¥ø‡¥§‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç?",
        "‡¥µ‡¥æ‡¥¥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥®‡µç‡¥§‡µç ‡¥µ‡¥≥‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç?",
        "‡¥á‡¥®‡µç‡¥®‡µç ‡¥Æ‡¥¥ ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡µÅ‡¥Æ‡µã?",
        "‡¥§‡¥ï‡µç‡¥ï‡¥æ‡¥≥‡¥ø‡¥Ø‡¥ø‡¥≤‡µÜ ‡¥á‡¥≤‡¥§‡µç‡¥§‡µÅ‡¥Æ‡µç‡¥™‡µç ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç?",
        "‡¥®‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥®‡µç ‡¥é‡¥§‡µç‡¥∞ ‡¥ú‡¥≤‡¥Ç ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç?",
        "‡¥Æ‡¥§‡µç‡¥§‡µª ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ?",
        "‡¥ú‡µà‡¥µ ‡¥µ‡¥≥‡¥Ç ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥ø‡¥ß‡¥Ç?"
    ]
    
    print("Testing queries with keyword analysis:")
    print("=" * 60)
    
    for query in test_queries:
        print(f"\nQuery: {query}")
        
        # Test keyword matching
        nlp_test = MalayalamNLP()
        keyword_result = nlp_test._detect_intent_by_keywords(query)
        pattern_result = nlp_test._detect_intent_by_patterns(query)
        final_result = nlp_test.detect_intent(query)
        
        print(f"  Keyword detection: {keyword_result}")
        print(f"  Pattern detection: {pattern_result}")
        print(f"  Final intent: {final_result}")

if __name__ == "__main__":
    test_nlp()
